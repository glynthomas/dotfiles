
# fil: .bash_prompt
# ver: 1.2.0
# cha: added date to title bar, auto verbose for GIT, then added the hackish method for enhanced GIT prompt status
# ack: inspired by gf3’s sexy bash prompt and “Extravagant Zsh Prompt”
# iTerm Tab and Title Customization and prompt customization
# http://sage.ucsc.edu/xtal/iterm_tab_customization.html
# and other code heroes on the interwebs ... all cooked up and served here.
# shamelessly ;-) copied from https://github.com/glynology/dotfiles

#------------------------------------------------------------------------------------------------------------- #

# one method of setting the current date and dir for title bar ...
# PROMPT_COMMAND='echo -ne "\033]0;[`date "+%a,%b,%d"`] ${PWD##/*/~}\007"'

# trims long paths down to 80 chars
_get_path(){
  local x=$(pwd | sed -e "s:$HOME:~:")
  local len=${#x}
  local max=80
  if [ $len -gt $max ]
  then
      echo ...${x:((len-max+3))}
  else
      echo ${x}
  fi
}

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      LIGHT_BLUE=$'\033[1;34m'
      MAGENTA=$(tput setaf 9)
      ORANGE=$(tput setaf 172)
      GREEN=$(tput setaf 190)
      YELLOW=$(tput setaf 3)
      PURPLE=$(tput setaf 141)
      WHITE=$(tput setaf 256)
      UNDERLINE=$(tput smul)
      NORMAL=$(tput sgr0)
    else
      LIGHT_BLUE=$'\033[1;34m'
      MAGENTA=$(tput setaf 5)
      ORANGE=$(tput setaf 4)
      GREEN=$(tput setaf 2)
      YELLOW=$(tput setaf 3)
      PURPLE=$(tput setaf 1)
      WHITE=$(tput setaf 7)
      UNDERLINE=$(tput smul)
      NORMAL=$(tput sgr0)
    fi
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
  UNDERLINE=$(tput smul)
  NORMAL=$(tput sgr0)
else
  LIGHT_BLUE=$'\033[1;34m'
  MAGENTA="\033[1;31m"
  ORANGE="\033[1;33m"
  GREEN="\033[1;32m"
  PURPLE="\033[1;35m"
  WHITE="\033[1;37m"
  BOLD=""
  RESET="\033[m"
fi

# add futher txt color support
export CLICOLOR=1
# or -> export LSCOLORS=ExFxCxDxBxegedabagacad
# or -> export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
export LSCOLORS=gxfxcxdxxxegedabagacgx


# the more gitified method of adding git status to the prompt -------------------------------------------------- # 

# enable git unstaged indicators - set to a non-empty value
#GIT_PS1_SHOWDIRTYSTATE="." 

# enable showing of untracked files - set to a non-empty value
#GIT_PS1_SHOWUNTRACKEDFILES="." 

# enable stash checking - set to a non-empty value
#GIT_PS1_SHOWSTASHSTATE="."
 
# enable showing of HEAD vs its upstream
#GIT_PS1_SHOWUPSTREAM="auto"
 
# return the prompt prefix for the second line
#function set_prefix { 
#  BRANCH=`__git_ps1`
#    if [[ -z $BRANCH ]]; then
#        echo "${NORMAL}o"
#    else
#        echo "${UNDERLINE}+"
#    fi
#}
 
#PS1='${LIGHT_BLUE}\u${NORMAL} in ${GREEN}\w${WHITE}`__git_ps1 " '${NORMAL}on${MAGENTA}' %s "`${NORMAL}\r\n`set_prefix`${NORMAL}\033[s\033[u${WHITE}${NORMAL} '

# the rather hackish method of greping the git status for the prompt --------------------------------------------- # 

# F = -v clean no change, -! there are changes, -!! staged but not commit changes

#function parse_git_dirty {
#    F="$(git status 2> /dev/null | tail -n1 | awk '{ print $1 }' )"
#    if [ "$F" = "nothing" ] ; then
#        echo -e "-v"
#    elif [ "$F" = "no" ]; then
#        echo -e "-!"
#    elif [ "$F" = "#" ]; then
#        echo -e "-!!"
#    else
#        echo "-"
#    fi
#}

# or ...

function parse_git_dirty() {
[[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function parse_git_branch() {
git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

PS1="\[\e]2;[`date "+%a,%b,%d"`] $PWD\[\a\]\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]\[${BOLD}${ORANGE}\]\u \[$WHITE\]at \[$LIGHT_BLUE\]\h \[$WHITE\]in \[$MAGENTA\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n$ \[$RESET\]"

